..  Copyright (C)  Brad Miller, David Ranum
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.


¿Por qué estudiar algoritmos?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Los científicos de la computación aprenden por experiencia. Aprendemos al ver a otros resolver problemas y resolviendo problemas por nosotros mismos. Estar expuesto a diferentes técnicas de solución de problemas y ver cómo se diseñan diferentes algoritmos nos ayuda a enfrentar el próximo problema desafiante que se nos presente. Al considerar una serie de algoritmos diferentes, podemos comenzar a desarrollar un reconocimiento de patrones de modo que, la próxima vez que surja un problema similar, estemos más capacitados para resolverlo.

.. Computer scientists learn by experience. We learn by seeing others solve problems and by solving problems by ourselves. Being exposed to different problem-solving techniques and seeing how different algorithms are designed helps us to take on the next challenging problem that we are given. By considering a number of different algorithms, we can begin to develop pattern recognition so that the next time a similar problem arises, we are better able to solve it.

Los algoritmos son a menudo muy diferentes entre sí. Considere el ejemplo de ``sqrt`` visto anteriormente. Es completamente posible que haya muchas maneras diferentes de implementar los detalles para calcular la función de la raíz cuadrada. Un algoritmo puede utilizar muchos menos recursos que otro. Un algoritmo puede tomar 10 veces más tiempo para devolver el resultado que el otro. Nos gustaría tener alguna manera de comparar estas dos soluciones. Aunque ambos funcionen, una es quizás “mejor” que la otra. Podríamos sugerir que una es más eficiente o que una simplemente trabaja más rápido o usa menos memoria. A medida que estudiamos algoritmos, podemos aprender técnicas de análisis que nos permiten comparar y contrastar soluciones basadas únicamente en sus propias características, no en las características del programa o de la computadora utilizada para implementarlas.

.. Algorithms are often quite different from one another. Consider the example of ``sqrt`` seen earlier. It is entirely possible that there are many different ways to implement the details to compute the square root function. One algorithm may use many fewer resources than another. One algorithm might take 10 times as long to return the result as the other. We would like to have some way to compare these two solutions. Even though they both work, one is perhaps “better” than the other. We might suggest that one is more efficient or that one simply works faster or uses less memory. As we study algorithms, we can learn analysis techniques that allow us to compare and contrast solutions based solely on their own characteristics, not the characteristics of the program or computer used to implement them.

En el peor de los casos, podemos tener un problema que es intratable, lo que significa que no hay ningún algoritmo que puede resolver el problema en una cantidad realista de tiempo. Es importante poder distinguir entre aquellos problemas que tienen soluciones, los que no tienen, y aquellos en los que existen soluciones pero que requieren demasiado tiempo u otros recursos para trabajar razonablemente.

.. In the worst case scenario, we may have a problem that is intractable, meaning that there is no algorithm that can solve the problem in a realistic amount of time. It is important to be able to distinguish between those problems that have solutions, those that do not, and those where solutions exist but require too much time or other resources to work reasonably.

A menudo habrá concesiones mutuas que tendremos que identificar y  sobre las cuales debemos decidir. Como científicos de la computación, además de nuestra capacidad para resolver problemas, también necesitaremos conocer y entender las técnicas de evaluación de las soluciones. Al fin y al cabo, a menudo hay muchas maneras de resolver un problema. Encontrar una solución y luego decidir si es una buena son tareas que vamos a hacer una y otra vez.

.. There will often be trade-offs that we will need to identify and decide upon. As computer scientists, in addition to our ability to solve problems, we will also need to know and understand solution evaluation techniques. In the end, there are often many ways to solve a problem. Finding a solution and then deciding whether it is a good one are tasks that we will do over and over again.


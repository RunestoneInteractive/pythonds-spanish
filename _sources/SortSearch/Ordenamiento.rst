..  Copyright (C)  Brad Miller, David Ranum
    This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.


Ordenamiento
------------

Ordenar es el proceso de ubicar elementos de una colección en algún orden. Por ejemplo, una lista de palabras podría ordenarse alfabéticamente o por longitud. Una lista de ciudades podría ordenarse por población, por área o por código postal. Ya hemos visto una serie de algoritmos que fueron capaces de beneficiarse de tener una lista ordenada (recuerde el ejemplo final del anagrama y la búsqueda binaria).

.. Sorting is the process of placing elements from a collection in some kind of order. For example, a list of words could be sorted alphabetically or by length. A list of cities could be sorted by population, by area, or by zip code. We have already seen a number of algorithms that were able to benefit from having a sorted list (recall the final anagram example and the binary search).

Se han desarrollado y analizado muchísimos algoritmos de ordenamiento. Esto sugiere que el ordenamiento es una importante área de estudio en las ciencias de la computación. Ordenar un gran número de ítems puede requerir una cantidad considerable de recursos informáticos. Al igual que la búsqueda, la eficiencia de un algoritmo de ordenamiento está relacionada con el número de ítems que se están procesando. Para las pequeñas colecciones, un método de ordenamiento complejo puede resultar más problemático que beneficioso. La sobrecarga puede ser demasiado alta. Por otra parte, para colecciones más grandes, queremos aprovechar tantas mejoras como sean posibles. En esta sección discutiremos varias técnicas de ordenamiento y las compararemos respecto a sus tiempos de ejecución.

.. There are many, many sorting algorithms that have been developed and analyzed. This suggests that sorting is an important area of study in computer science. Sorting a large number of items can take a substantial amount of computing resources. Like searching, the efficiency of a sorting algorithm is related to the number of items being processed. For small collections, a complex sorting method may be more trouble than it is worth. The overhead may be too high. On the other hand, for larger collections, we want to take advantage of as many improvements as possible. In this section we will discuss several sorting techniques and compare them with respect to their running time.

Antes de considerar algoritmos específicos, debemos pensar en las operaciones que se pueden utilizar para analizar un proceso de ordenamiento. Primero, será necesario comparar dos valores para ver cuál es más pequeño (o más grande). Para ordenar una colección, será necesario contar con una manera sistemática de comparar los valores para ver si no están en orden. El número total de comparaciones será la forma más común de medir un procedimiento de ordenamiento. En segundo lugar, cuando los valores no están en la posición correcta con respecto a los otros, puede ser necesario intercambiarlos. Este intercambio es una operación costosa y el número total de intercambios también será importante para evaluar la eficiencia global del algoritmo.

.. Before getting into specific algorithms, we should think about the operations that can be used to analyze a sorting process. First, it will be necessary to compare two values to see which is smaller (or larger). In order to sort a collection, it will be necessary to have some systematic way to compare values to see if they are out of order. The total number of comparisons will be the most common way to measure a sort procedure. Second, when values are not in the correct position with respect to one another, it may be necessary to exchange them. This exchange is a costly operation and the total number of exchanges will also be important for evaluating the overall efficiency of the algorithm.
